// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package database

import (
	"context"
	"database/sql"
	"time"
)

const createAccessLog = `-- name: CreateAccessLog :one
INSERT INTO "access_log" (
  "message_id", "remote_address", "accessed_at"
) VALUES (
  ?, ?, ?
)
RETURNING message_id, remote_address, accessed_at
`

type CreateAccessLogParams struct {
	MessageID     int64
	RemoteAddress string
	AccessedAt    time.Time
}

func (q *Queries) CreateAccessLog(ctx context.Context, arg CreateAccessLogParams) (AccessLog, error) {
	row := q.db.QueryRowContext(ctx, createAccessLog, arg.MessageID, arg.RemoteAddress, arg.AccessedAt)
	var i AccessLog
	err := row.Scan(&i.MessageID, &i.RemoteAddress, &i.AccessedAt)
	return i, err
}

const createMessage = `-- name: CreateMessage :one
INSERT INTO "message" (
  "code", "encrypted_text", "author_email",  "should_burn", "should_burn_in_minutes", "created_at"
) VALUES (
  ?, ?, ?, ?, ?, ?
)
RETURNING id, code, encrypted_text, author_email, should_burn, should_burn_in_minutes, created_at, delete_at
`

type CreateMessageParams struct {
	Code                string
	EncryptedText       string
	AuthorEmail         string
	ShouldBurn          bool
	ShouldBurnInMinutes sql.NullInt64
	CreatedAt           time.Time
}

func (q *Queries) CreateMessage(ctx context.Context, arg CreateMessageParams) (Message, error) {
	row := q.db.QueryRowContext(ctx, createMessage,
		arg.Code,
		arg.EncryptedText,
		arg.AuthorEmail,
		arg.ShouldBurn,
		arg.ShouldBurnInMinutes,
		arg.CreatedAt,
	)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.EncryptedText,
		&i.AuthorEmail,
		&i.ShouldBurn,
		&i.ShouldBurnInMinutes,
		&i.CreatedAt,
		&i.DeleteAt,
	)
	return i, err
}

const deleteMessage = `-- name: DeleteMessage :exec
DELETE FROM "message"
WHERE "id" = ?
`

func (q *Queries) DeleteMessage(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteMessage, id)
	return err
}

const deleteMessageWhereDeleteAtLessThanTime = `-- name: DeleteMessageWhereDeleteAtLessThanTime :exec
DELETE FROM "message"
WHERE "delete_at" < ?
`

func (q *Queries) DeleteMessageWhereDeleteAtLessThanTime(ctx context.Context, deleteAt sql.NullTime) error {
	_, err := q.db.ExecContext(ctx, deleteMessageWhereDeleteAtLessThanTime, deleteAt)
	return err
}

const getMessageByCode = `-- name: GetMessageByCode :one
SELECT id, code, encrypted_text, author_email, should_burn, should_burn_in_minutes, created_at, delete_at FROM "message"
WHERE "code" = ? LIMIT 1
`

func (q *Queries) GetMessageByCode(ctx context.Context, code string) (Message, error) {
	row := q.db.QueryRowContext(ctx, getMessageByCode, code)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.EncryptedText,
		&i.AuthorEmail,
		&i.ShouldBurn,
		&i.ShouldBurnInMinutes,
		&i.CreatedAt,
		&i.DeleteAt,
	)
	return i, err
}

const setDeleteAtOnMessage = `-- name: SetDeleteAtOnMessage :exec
UPDATE "message"
SET "delete_at" = ?
WHERE "id" = ?
`

type SetDeleteAtOnMessageParams struct {
	DeleteAt sql.NullTime
	ID       int64
}

func (q *Queries) SetDeleteAtOnMessage(ctx context.Context, arg SetDeleteAtOnMessageParams) error {
	_, err := q.db.ExecContext(ctx, setDeleteAtOnMessage, arg.DeleteAt, arg.ID)
	return err
}
